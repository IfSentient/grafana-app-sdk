package {{.PackageName}}

import (
    "context"
    "fmt"

    "github.com/grafana/grafana-app-sdk/operator"
	"github.com/grafana/grafana-app-sdk/resource"

	"{{.Repo}}/{{.CodegenPath}}/resource/{{.MachineName}}"
)

var _ operator.ResourceWatcher = &{{.Name}}Watcher{}

type {{.Name}}Watcher struct {}

func New{{.Name}}Watcher() (*{{.Name}}Watcher, error) {
	return &{{.Name}}Watcher{}, nil
}

// Add handles add events for {{.MachineName}}.Object resources.
func (s *{{.Name}}Watcher) Add(ctx context.Context, rObj resource.Object) error {
    object, ok := rObj.(*{{.MachineName}}.Object)
    if !ok {
        return fmt.Errorf("provided object is not of type *{{.MachineName}}.Object (name=%s, namespace=%s, kind=%s)",
            rObj.StaticMetadata().Name, rObj.StaticMetadata().Namespace, rObj.StaticMetadata().Kind)
    }

    // TODO
    fmt.Println("Added ", object.StaticMetadata().Identifier())
	return nil
}

// Update handles update events for {{.MachineName}}.Object resources.
func (s *{{.Name}}Watcher) Update(ctx context.Context, rOld resource.Object, rNew resource.Object) error {
    oldObject, ok := rOld.(*{{.MachineName}}.Object)
    if !ok {
        return fmt.Errorf("provided object is not of type *{{.MachineName}}.Object (name=%s, namespace=%s, kind=%s)",
            rOld.StaticMetadata().Name, rOld.StaticMetadata().Namespace, rOld.StaticMetadata().Kind)
    }

    newObject, ok := rNew.(*{{.MachineName}}.Object)
    if !ok {
        return fmt.Errorf("provided object is not of type *{{.MachineName}}.Object (name=%s, namespace=%s, kind=%s)",
            rNew.StaticMetadata().Name, rNew.StaticMetadata().Namespace, rNew.StaticMetadata().Kind)
    }

    // TODO
    fmt.Println("Updated ", oldObject.StaticMetadata().Identifier(), newObject.StaticMetadata().Identifier())
	return nil
}

// Delete handles delete events for {{.MachineName}}.Object resources.
func (s *{{.Name}}Watcher) Delete(ctx context.Context, rObj resource.Object) error {
    object, ok := rObj.(*{{.MachineName}}.Object)
    if !ok {
        return fmt.Errorf("provided object is not of type *{{.MachineName}}.Object (name=%s, namespace=%s, kind=%s)",
            rObj.StaticMetadata().Name, rObj.StaticMetadata().Namespace, rObj.StaticMetadata().Kind)
    }

    // TODO
    fmt.Println("Deleted ", object.StaticMetadata().Identifier())
	return nil
}

// Sync is not a standard resource.Watcher function, but is used when wrapping this watcher in an operator.OpinionatedWatcher.
// It handles resources which MAY have been updated during an outage period where the watcher was not able to consume events.
func (s *{{.Name}}Watcher) Sync(ctx context.Context, rObj resource.Object) error {
    object, ok := rObj.(*{{.MachineName}}.Object)
    if !ok {
        return fmt.Errorf("provided object is not of type *{{.MachineName}}.Object (name=%s, namespace=%s, kind=%s)",
            rObj.StaticMetadata().Name, rObj.StaticMetadata().Namespace, rObj.StaticMetadata().Kind)
    }

    // TODO
    fmt.Println("Possible update to ", object.StaticMetadata().Identifier())
	return nil
}
