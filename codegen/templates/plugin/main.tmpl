package main

import (
    "context"
    "fmt"

    "github.com/grafana/grafana-app-sdk/plugin/kubeconfig"
    "github.com/grafana/grafana-app-sdk/resource"
    "github.com/grafana/grafana-app-sdk/k8s"

    {{ range .Resources }}{{if .IsCRD }}"{{$.Repo}}/{{$.APICodegenPath}}/resource/{{.MachineName}}"{{end}}
    {{end}}"{{.Repo}}/pkg/plugin"
)

func main() {
    svc := &PluginService{}

    // GENERATED SIMPLE SERVICE INITIALIZER CODE
    {{ range .Resources }}svc.{{ .MachineName }}ServiceInitializer = kubeconfig.CachingInitializer(
        {{ if .IsCRD }}func(cfg kubeconfig.NamespacedConfig) (plugin.{{.Name}}Service, error) {
            // This is example code which assumes the API and storage models are identical
            // TODO: REPLACEME
            return resource.NewTypedStore[*{{.MachineName}}.Object]({{.MachineName}}.Schema(), k8s.NewClientRegistry(cfg.RestConfig, k8s.ClientConfig{}))
        }){{ else }}func(cfg kubeconfig.NamespacedConfig) (plugin.{{.Name}}Service, error) {
            // FIXME: This must be implemented for the router to work
            // FIXME: You will need to write an implementation of plugin.{{.Name}}Service to initialize here
            return nil, nil
        }){{ end }}
    {{end}}

    p, err := plugin.New("default", svc) // TODO: fix namespace usage
    if err != nil {
        panic(err)
    }

    // Start listening
    err = p.Start()
    if err != nil {
        panic(err)
    }
}

//
// GENERATED EXAMPLE SERVICE CODE
// You may want to write your own PluginService code. This example code uses lazy-loading initializers
// (as kubeconfig comes from the secureJSONData, which is not known at start-time, only at request-time)
// to return the appropriate service based on the unexported initializer function for each schema Service type.
//

// PluginService implements plugin.Service
type PluginService struct { {{ range .Resources }}
    {{ .MachineName }}ServiceInitializer kubeconfig.Initializer[plugin.{{.Name}}Service]{{end}}
}
{{ range .Resources }}
// Get{{.Name}}Service returns a {{.Name}}Service, use the kube config from the context if initialization is required
func (s *PluginService) Get{{.Name}}Service(ctx context.Context) (plugin.{{.Name}}Service, error) {
    cfg, err := kubeconfig.FromContext(ctx)
    if err != nil {
        return nil, err
    }

    if s.{{ .MachineName }}ServiceInitializer == nil {
        return nil, fmt.Errorf("no service initialization code")
    }

    return s.{{ .MachineName }}ServiceInitializer(cfg)
}
{{end}}
